// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/ParameterSet/interface/FileInPath.h"

#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/PatCandidates/interface/Electron.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/MuonReco/interface/Muon.h"

#include "DataFormats/RecoCandidate/interface/IsoDepositVetos.h"
#include "DataFormats/RecoCandidate/interface/IsoDeposit.h"
#include "DataFormats/PatCandidates/interface/Isolation.h"

#include "HiggsAnalysis/HiggsToWW2Leptons/interface/ElectronIDMVA.h"

#include "MagneticField/Records/interface/IdealMagneticFieldRecord.h"
#include "MagneticField/Engine/interface/MagneticField.h"
#include "DataFormats/GeometryVector/interface/GlobalPoint.h"
#include "DataFormats/GsfTrackReco/interface/GsfTrack.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectron.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectronFwd.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/Scalers/interface/DcsStatus.h"
#include "RecoEgamma/EgammaTools/interface/ConversionFinder.h"
#include "DataFormats/EgammaCandidates/interface/Conversion.h"

#include "DataFormats/BeamSpot/interface/BeamSpot.h"

#include "RecoEgamma/EgammaTools/interface/ConversionTools.h"
#include "DataFormats/EcalRecHit/interface/EcalRecHit.h"
#include "RecoEcal/EgammaCoreTools/interface/EcalClusterLazyTools.h"

#include "TrackingTools/TransientTrack/interface/TransientTrackBuilder.h"
#include "TrackingTools/TransientTrack/plugins/TransientTrackBuilderESProducer.h"
#include "EGamma/EGammaAnalysisTools/interface/EGammaMvaEleEstimator.h"
#include "DataFormats/GeometryVector/interface/VectorUtil.h"

using namespace std;
using namespace reco;
class EGammaMvaEleEstimatorCSA14;
//
// class declaration
//

class ElectronsUserEmbedder : public edm::EDProducer {
   public:
      explicit ElectronsUserEmbedder(const edm::ParameterSet&);
      ~ElectronsUserEmbedder();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:
      virtual void beginJob() ;
      virtual void produce(edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;
      
      virtual void beginRun(edm::Run&, edm::EventSetup const&);
      virtual void endRun(edm::Run&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);

      // ----------member data ---------------------------

      edm::InputTag electronTag_;
      edm::InputTag vertexTag_;

      std::vector<std::string> mvaWeightFiles_;
      EGammaMvaEleEstimatorCSA14* mvaTrig_;

};

//
// constants, enums and typedefs
//


//
// static data member definitions
//

//
// constructors and destructor
//
ElectronsUserEmbedder::ElectronsUserEmbedder(const edm::ParameterSet& iConfig)
{

  bsTag_ = (iConfig.getUntrackedParameter<edm::InputTag>("offlineBeamSpot", edm::InputTag("offlineBeamSpot"))),
  vertexTag_ = (iConfig.getUntrackedParameter<edm::InputTag>("vertexSrc", edm::InputTag("goodOfflinePrimaryVertices"))),
  electronTag_ = (iConfig.getUntrackedParameter<edm::InputTag>("electronSrc", edm::InputTag("selectedPatElectrons"))),
  bsToken_ = consumes<reco::BeamSpot>(bsTag_);
  vertexToken_ = consumes<reco::VertexCollection>(vertexTag_));
  electronToken_(consumes<pat::ElectronCollection>(electronTag_));

  // Electron MVA part
  std::vector<std::string> wtFiles = iConfig.getParameter<std::vector<std::string> >("mvaWeightFiles");
  for (size_t i = 0; i < wtFiles.size(); ++i) {
    std::string path = edm::FileInPath(wtFiles[i].c_str()).fullPath();
    mvaWeightFiles_.push_back(path);
  }
  mvaTrig_ = new EGammaMvaEleEstimatorCSA14();
  mvaTrig_->initialize("BDT",  ((trigMode_) ? EGammaMvaEleEstimatorCSA14::kTrig
          		  : ((wtFiles.size() > 4) ? EGammaMvaEleEstimatorCSA14::kNonTrigPhys14 :
		            EGammaMvaEleEstimatorCSA14::kNonTrig)),
	                    true, // fixed
			    mvaWeightFiles_);

  produces<pat::ElectronCollection>("");
  
}


ElectronsUserEmbedder::~ElectronsUserEmbedder()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)
  delete mvaTrig_;
}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
ElectronsUserEmbedder::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  using namespace edm;
  using namespace reco;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  std::auto_ptr< pat::ElectronCollection > electronsUserEmbeddedColl( new pat::ElectronCollection() ) ;

  edm::Handle<pat::ElectronCollection> electrons;
  bool found = iEvent.getByToken(electronToken_, electrons);

  if (found && electrons.isValid()) {
    edm::Handle<reco::BeamSpot> beamSpot;
    if (bsCorr_) iEvent.getByToken(bsToken_, beamSpot);

    edm::Handle<reco::VertexCollection> primaryVertices;
    iEvent.getByToken(vertexToken_, primaryVertices);

    for (const pat::Electron& v: *electrons) {
      if (list_->size() == kMaxElectron_) break;

      pat::Electron userElectron;
      
      float mva = mvaTrig_->mvaValue(v, false);
      userElectron.addUserFloat("mavId", mva);
      electronsUserEmbeddedColl->push_back(userElectron);
    }
  }

  for(unsigned int i = 0; i < electrons->size(); i++){

    pat::Electron aElectron( (*electrons)[i] );
    const reco::GsfElectron* aGsf = static_cast<reco::GsfElectron*>(&aElectron); 

    electronsUserEmbeddedColl->push_back(aElectron);

  }

  iEvent.put( electronsUserEmbeddedColl );
  return;
}

// ------------ method called once each job just before starting event loop  ------------
void 
ElectronsUserEmbedder::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
ElectronsUserEmbedder::endJob() {
}

// ------------ method called when starting to processes a run  ------------
void 
ElectronsUserEmbedder::beginRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
ElectronsUserEmbedder::endRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
ElectronsUserEmbedder::beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
ElectronsUserEmbedder::endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
ElectronsUserEmbedder::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(ElectronsUserEmbedder);
