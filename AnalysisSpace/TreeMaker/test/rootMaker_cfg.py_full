
import FWCore.ParameterSet.Config as cms
process = cms.Process("TreeMaker")
#------------------------
# Message Logger Settings
#------------------------
process.load("FWCore.MessageLogger.MessageLogger_cfi")
process.MessageLogger.cerr.FwkReport.reportEvery = 1
process.MessageLogger.infos.threshold = cms.untracked.string("ERROR")

process.load('Configuration.StandardSequences.Services_cff')
process.load('SimGeneral.HepPDTESSource.pythiapdt_cfi')
process.load('FWCore.MessageService.MessageLogger_cfi')
process.load('Configuration.EventContent.EventContent_cff')
process.load('SimGeneral.MixingModule.mixNoPU_cfi')
process.load('Configuration.StandardSequences.EndOfProcess_cff')

#--------------------------------------
# Event Source & # of Events to process
#---------------------------------------
Source_Files = cms.untracked.vstring('/store/user/amodak/RUN2/8EA4C10E-F35E-E511-ABF9-02163E014108.root')     
process.source = cms.Source("PoolSource",
  fileNames = Source_Files
)
process.maxEvents = cms.untracked.PSet(
  input = cms.untracked.int32(-1)
)
process.options = cms.untracked.PSet( wantSummary = cms.untracked.bool(False) )

#-----------------------------
# Geometry
#-----------------------------
process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
#-----------------------------
# Magnetic Field
#-----------------------------
process.load('Configuration.StandardSequences.MagneticField_38T_cff')


#configurable options =======================================================================
runOnData=True #data/MC switch, also for rerunning Met on MiniAOD
usePrivateSQlite=True #use external JECs (sqlite file)
useHFCandidates=False #create an additionnal NoHF slimmed MET collection if the option is set to false
applyResiduals=True #application of residual corrections. Have to be set to True once the 13 TeV residual corrections are available. False to be kept meanwhile. Can be kept to False later for private tests or for analysis checks and developments (not the official recommendation!).
#=============================================================
#External JECs------------------------------------------------
#-------------
# Global Tag
#-------------
process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_condDBv2_cff')
process.GlobalTag.globaltag = '74X_dataRun2_Prompt_v4'

'''
#process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
from Configuration.AlCa.autoCond import autoCond
if runOnData:
  process.GlobalTag.globaltag = '74X_dataRun2_v2'
  #process.GlobalTag.globaltag = autoCond['run2_data']
else:
  process.GlobalTag.globaltag = '74X_mcRun2_asymptotic_v2'
#-------------------------------------------------------------
if usePrivateSQlite:
    from CondCore.DBCommon.CondDBSetup_cfi import *
    import os
    if runOnData:
      era="Summer15_50nsV5_DATA"
    else:
      era="Summer15_25nsV5_MC"
      
    process.jec = cms.ESSource("PoolDBESSource",CondDBSetup,
                               connect = cms.string('sqlite:Summer15_50nsV5_DATA.db'),
                               #connect = cms.string( "frontier://FrontierPrep/CMS_COND_PHYSICSTOOLS"),
                               toGet =  cms.VPSet(
            cms.PSet(
                record = cms.string("JetCorrectionsRecord"),
                tag = cms.string("JetCorrectorParametersCollection_"+era+"_AK4PF"),
                label= cms.untracked.string("AK4PF")
                ),
            cms.PSet(
                record = cms.string("JetCorrectionsRecord"),
                tag = cms.string("JetCorrectorParametersCollection_"+era+"_AK4PFchs"),
                label= cms.untracked.string("AK4PFchs")
                ),
            )
                               )
    process.es_prefer_jec = cms.ESPrefer("PoolDBESSource",'jec')

### ---------------------------------------------------------------------------
### Removing the HF from the MET computation
### ---------------------------------------------------------------------------
if not useHFCandidates:
  process.noHFCands = cms.EDFilter("CandPtrSelector",
                                     src=cms.InputTag("packedPFCandidates"),
                                     cut=cms.string("abs(pdgId)!=1 && abs(pdgId)!=2 && abs(eta)<3.0")
                                     )

#jets are rebuilt from those candidates by the tools, no need to do anything else
### =================================================================================

from PhysicsTools.PatUtils.tools.runMETCorrectionsAndUncertainties import runMetCorAndUncFromMiniAOD

#default configuration for miniAOD reprocessing, change the isData flag to run on data
#for a full met computation, remove the pfCandColl input
runMetCorAndUncFromMiniAOD(process,
                           isData=runOnData,
                           )

if not useHFCandidates:
  runMetCorAndUncFromMiniAOD(process,
                               isData=runOnData,
                               pfCandColl=cms.InputTag("noHFCands"),
                               #reclusterJets=True, #needed for NoHF
                               #recoMetFromPFCs=True, #needed for NoHF
                               postfix="NoHF"
                               )
### =====================================================================================================
### -------------------------------------------------------------------
### the lines below remove the L2L3 residual corrections when processing data
### -------------------------------------------------------------------
if not applyResiduals:
    process.patPFMetT1T2Corr.jetCorrLabelRes = cms.InputTag("L3Absolute")
    process.patPFMetT1T2SmearCorr.jetCorrLabelRes = cms.InputTag("L3Absolute")
    process.patPFMetT2Corr.jetCorrLabelRes = cms.InputTag("L3Absolute")
    process.patPFMetT2SmearCorr.jetCorrLabelRes = cms.InputTag("L3Absolute")
    process.shiftedPatJetEnDown.jetCorrLabelUpToL3Res = cms.InputTag("ak4PFCHSL1FastL2L3Corrector")
    process.shiftedPatJetEnUp.jetCorrLabelUpToL3Res = cms.InputTag("ak4PFCHSL1FastL2L3Corrector")

    if not useHFCandidates:
          process.patPFMetT1T2CorrNoHF.jetCorrLabelRes = cms.InputTag("L3Absolute")
          process.patPFMetT1T2SmearCorrNoHF.jetCorrLabelRes = cms.InputTag("L3Absolute")
          process.patPFMetT2CorrNoHF.jetCorrLabelRes = cms.InputTag("L3Absolute")
          process.patPFMetT2SmearCorrNoHF.jetCorrLabelRes = cms.InputTag("L3Absolute")
          process.shiftedPatJetEnDownNoHF.jetCorrLabelUpToL3Res = cms.InputTag("ak4PFCHSL1FastL2L3Corrector")
          process.shiftedPatJetEnUpNoHF.jetCorrLabelUpToL3Res = cms.InputTag("ak4PFCHSL1FastL2L3Corrector")
### ------------------------------------------------------------------
'''

#--------------------------------------------------
# Analysis Tree Specific
#--------------------------------------------------
process.load("AnalysisSpace.TreeMaker.TreeCreator_cfi")
process.load("AnalysisSpace.TreeMaker.TreeWriter_cfi")
process.load("AnalysisSpace.TreeMaker.TreeContentConfig_data_cff")

#################################################################
#
# Set up electron ID (VID framework)
#

from PhysicsTools.SelectorUtils.tools.vid_id_tools import *
# turn on VID producer, indicate data format  to be
# DataFormat.AOD or DataFormat.MiniAOD, as appropriate 

switchOnVIDElectronIdProducer(process, DataFormat.MiniAOD)
# define which IDs we want to produce
my_id_modules = ['RecoEgamma.ElectronIdentification.Identification.mvaElectronID_Spring15_25ns_nonTrig_V1_cff']

#add them to the VID producer
for idmod in my_id_modules:
    setupAllVIDIdsInModule(process,idmod,setupVIDElectronSelection)

#################################################################
#User Defined Collections
#################################################################

process.UserElectron = cms.EDProducer('ElectronsUserEmbedder',
  beamSpotCorr = cms.untracked.bool(True),
  offlineBeamSpot = cms.untracked.InputTag('offlineBeamSpot'),
  #vertexSrc = cms.untracked.InputTag('goodOfflinePrimaryVertices'),
  vertexSrc = cms.untracked.InputTag('offlineSlimmedPrimaryVertices'),
  electronSrc = cms.untracked.InputTag('slimmedElectrons'),
  eleMediumIdMap = cms.InputTag("egmGsfElectronIDs:mvaEleID-Spring15-25ns-nonTrig-V1-wp90"),
  eleTightIdMap = cms.InputTag("egmGsfElectronIDs:mvaEleID-Spring15-25ns-nonTrig-V1-wp80"),
  mvaValuesMap = cms.InputTag("electronMVAValueMapProducer:ElectronMVAEstimatorRun2Spring15NonTrig25nsV1Values"),
  mvaCategoriesMap = cms.InputTag("electronMVAValueMapProducer:ElectronMVAEstimatorRun2Spring15NonTrig25nsV1Categories"),
)

process.UserMuon = cms.EDProducer('MuonsUserEmbedder',
  beamSpotCorr = cms.untracked.bool(True),
  offlineBeamSpot = cms.untracked.InputTag('offlineBeamSpot'),
# vertexSrc = cms.untracked.InputTag('goodOfflinePrimaryVertices'),
  vertexSrc = cms.untracked.InputTag('offlineSlimmedPrimaryVertices'),
  muonSrc = cms.untracked.InputTag('slimmedMuons'),
)
#############################################################################
#Prepare lepton collections for MVA MET 
#############################################################################
process.ElectronsForMVAMet = cms.EDFilter("PATElectronSelector",
        src = cms.InputTag("UserElectron"),
        cut = cms.string("pt >= 20.0 && abs(eta) < 2.1 && userFloat('mvaId') > 0.0 && userFloat('pfRelIso') < 0.1"),
        filter = cms.bool(False)
)
process.MuonsForMVAMet = cms.EDFilter("PATMuonSelector",
        src = cms.InputTag("UserMuon"),
        cut = cms.string("pt >= 20.0 && abs(eta) < 2.1 && isGlobalMuon && userFloat('chargedHadronIso') < 0.1"),
        filter = cms.bool(False)
)
process.TausForMVAMet = cms.EDFilter('PATTauSelector',
        src = cms.InputTag('slimmedTaus'),
        cut = cms.string("pt > 20 && abs(eta) < 2.3 && tauID('decayModeFinding') > 0.5 && tauID('againstMuonTight3') > 0.5 && tauID('againstElectronLooseMVA5') > 0.5 && tauID('chargedIsoPtSum') < 2.0"),
        filter = cms.bool(False)
)
'''
###########################################################################
#SetUp MVA MET
###########################################################################
process.load("RecoJets.JetProducers.ak4PFJets_cfi")
process.ak4PFJets.src = cms.InputTag("packedPFCandidates")
process.ak4PFJets.doAreaFastjet = cms.bool(True)
from JetMETCorrections.Configuration.DefaultJEC_cff import ak4PFJetsL1FastL2L3
process.load("RecoMET.METPUSubtraction.mvaPFMET_cff")
process.pfMVAMEt.srcPFCandidates = cms.InputTag("packedPFCandidates")
process.pfMVAMEt.srcVertices = cms.InputTag("offlineSlimmedPrimaryVertices")
process.pfMVAMEt.srcLeptons = cms.VInputTag("ElectronsForMVAMet", "MuonsForMVAMet", "TausForMVAMet")
#process.puJetIdForPFMVAMEt.jec = cms.string('AK4PF')
process.puJetIdForPFMVAMEt.vertexes = cms.InputTag("offlineSlimmedPrimaryVertices")
#process.puJetIdForPFMVAMEt.rho = cms.InputTag("fixedGridRhoFastjetAll")

process.mvaMet = cms.Sequence(process.pfMVAMEtSequence)
#################################
'''

process.p = cms.Path(
  process.egmGsfElectronIDSequence*
  process.UserElectron*
  process.UserMuon*
  process.ElectronsForMVAMet*
  process.MuonsForMVAMet*
  process.TausForMVAMet*
  #process.ak4PFJets*
  #process.mvaMet*
  process.treeCreator*
  process.treeContentSequence*
  process.treeWriter
)
#################################
#-------------
# Output ROOT file
#-------------
process.TFileService = cms.Service("TFileService",
   #fileName = cms.string('SingleMuon_Run2015D_25ns_MiniAOD.root')
   fileName = cms.string('/lustre/cms/store/user/amodak/RUN2/test.root')
)

